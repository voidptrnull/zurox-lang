program             ::= declaration*

declaration         ::= function_declaration
                      | enum_declaration
                      | struct_declaration

function_declaration ::= 'fn' identifier '(' parameters? ')' return_type? block

parameters          ::= parameter (',' parameter)*

parameter           ::= type identifier

return_type         ::= '->' type

block               ::= '{' statement* '}'

statement           ::= if_statement
                      | loop_statement
                      | var_declaration
                      | expression_statement
                      | match_statement
                      | break_statement
                      | continue_statement

if_statement        ::= 'if' '(' expression ')' block ('elif' '(' expression ')' block)* ('else' block)?

loop_statement      ::= 'loop' block

var_declaration     ::= type identifier ('=' expression)? ';'

expression_statement ::= expression ';'

match_statement     ::= 'match' '{' (case_clause)* ('_' ':' block)? '}'

case_clause         ::= literal ':' block

break_statement     ::= 'break' ';'

continue_statement  ::= 'continue' ';'

enum_declaration    ::= 'enum' identifier '{' enum_fields '}'

enum_fields         ::= identifier (',' identifier)* ';'

struct_declaration ::= 'struct' identifier '{' struct_fields '}'

struct_fields       ::= type identifier (',' type identifier)* ';'

expression          ::= term (('+' | '-') term)*

term                ::= factor (('+' | '-') factor)*

factor              ::= unary_expr (('+' | '-') unary_expr)*

unary_expr          ::= primary
                      | unary_op unary_expr

primary             ::= NUMBER
                      | STRING
                      | CHARACTER
                      | identifier
                      | '(' expression ')'

binary_expr         ::= factor (('*' | '/' | '%' | '+' | '-' | '<<' | '>>' | '&' | '|' | '^') factor)*

type                ::= 'i8'
                      | 'i16'
                      | 'i32'
                      | 'i64'
                      | 'u8'
                      | 'u16'
                      | 'u32'
                      | 'u64'
                      | 'f32'
                      | 'f64'
                      | 'char'
                      | 'bool'
                      | 'struct' identifier
                      | 'enum' identifier

literal             ::= NUMBER
                      | STRING
                      | CHARACTER

unary_op            ::= '+'
                      | '-'
                      | '!'
                      | '~'

identifier          ::= [a-zA-Z_][a-zA-Z0-9_]*
NUMBER              ::= [0-9]+
STRING              ::= '"' [^"]* '"'
CHARACTER           ::= '\'' [^'] '\''