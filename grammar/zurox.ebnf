
program             ::= declaration*

declaration         ::= function_declaration
                      | enum_declaration
                      | struct_declaration

function_declaration ::= 'fn' identifier '(' parameters? ')' return_type? block

parameters          ::= parameter (',' parameter)*

parameter           ::= type identifier

return_type         ::= '->' type

block               ::= '{' statement* '}'

statement           ::= if_statement
                      | loop_statement
                      | var_declaration
                      | expression_statement
                      | match_statement
                      | break_statement
                      | continue_statement
                      | ret_statement
                      | asm_block_statement

if_statement        ::= 'if' '(' expression ')' block ('elif' '(' expression ')' block)* ('else' block)?

loop_statement      ::= 'loop' block

var_declaration     ::= type identifier ('=' expression)? ';'
                      | type identifier '[' NUMBER ']' ('=' array_literal)? ';'

expression_statement ::= expression ';'

match_statement     ::= 'match' '{' (case_clause)* ('_' ':' block)? '}'

case_clause         ::= literal ':' block

break_statement     ::= 'break' ';'

continue_statement  ::= 'continue' ';'

ret_statement       ::= 'ret' expression? ';'

enum_declaration    ::= 'enum' identifier '{' enum_fields '}'

enum_fields         ::= identifier (',' identifier)* ';'

struct_declaration ::= 'struct' identifier '{' struct_fields '}'

struct_fields       ::= field_declaration*

field_declaration  ::= type_specifier_pair (',' type_specifier_pair)* ';'

type_specifier_pair ::= type identifier
                      | type identifier '[' NUMBER ']'
expression          ::= term (('+' | '-') term)*

term                ::= factor (('*' | '/' | '%') factor)*

factor              ::= unary_expr (('^') unary_expr)*

unary_expr          ::= primary
                      | '++' primary
                      | '--' primary
                      | unary_op unary_expr

primary             ::= NUMBER
                      | STRING
                      | CHARACTER
                      | identifier
                      | '(' expression ')'
                      | array_literal
                      | array_access

type                ::= 'i8'
                      | 'i16'
                      | 'i32'
                      | 'i64'
                      | 'u8'
                      | 'u16'
                      | 'u32'
                      | 'u64'
                      | 'f32'
                      | 'f64'
                      | 'char'
                      | 'bool'
                      | 'struct' identifier
                      | 'enum' identifier
                      | type '[' NUMBER ']'

literal             ::= NUMBER
                      | STRING
                      | CHARACTER
                      | array_literal

unary_op            ::= '+'
                      | '-'
                      | '!'
                      | '~'

identifier          ::= [a-zA-Z_][a-zA-Z0-9_]*

asm_block_statement ::= 'asm' '{' asm_instructions '}'

asm_instructions    ::= asm_instruction+

asm_instruction     ::= STRING

array_literal       ::= '{' (literal (',' literal)*)? '}'

array_access        ::= identifier '[' expression ']'

NUMBER              ::= [0-9]+
STRING              ::= '"' [^"]* '"'
CHARACTER           ::= '\'' [^'] '\''
